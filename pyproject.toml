[project]
name = "gemini-literature-search-mcp"
description = "AI-powered academic literature search and validation MCP server using Google Gemini"
version = "1.0.0"
readme = "README.md"
license = { text = "MIT" }
authors = [
    { name = "Literature Search MCP", email = "noreply@example.com" }
]
keywords = ["mcp", "literature", "search", "gemini", "academic", "research", "ai"]
requires-python = ">=3.10"
dependencies = [
    "fastmcp>=0.4.1",
    "google-generativeai>=0.8.0",
    "requests>=2.31.0",
    "pydantic>=2.10.0",
    "python-dotenv>=1.0.0",
]

[tool.uv]
dev-dependencies = [
    "pytest>=8.3.0",
    "black>=24.0.0",
    "ruff>=0.1.0",
    "mypy>=1.8.0",
]

[tool.black]
line-length = 88
target-version = ['py310', 'py311', 'py312']

[tool.ruff]
target-version = "py310"
line-length = 88
select = [
    "E",  # pycodestyle errors
    "W",  # pycodestyle warnings
    "F",  # pyflakes
    "I",  # isort
    "B",  # flake8-bugbear
    "C4", # flake8-comprehensions
    "UP", # pyupgrade
]
ignore = []

[tool.ruff.per-file-ignores]
"__init__.py" = ["F401"]

[tool.mypy]
python_version = "3.10"
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = true
disallow_incomplete_defs = true
check_untyped_defs = true
disallow_untyped_decorators = true
no_implicit_optional = true
warn_redundant_casts = true
warn_unused_ignores = true
warn_no_return = true
warn_unreachable = true
strict_equality = true

[tool.pytest.ini_options]
testpaths = ["tests"]
python_files = ["test_*.py", "*_test.py"]
python_classes = ["Test*"]
python_functions = ["test_*"]
addopts = "-v --tb=short"